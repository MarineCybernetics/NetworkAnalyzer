"use strict";

var React = require('react'),
    InlineSVG = require('react-inlinesvg'),
    AppActionCreators = require('../actions/AppActionCreators'),
    Network = require('./Network'),
    Switches = require('./Switches'),
    Server = require('./Server'),
    PLC = require('./PLC'),
    Chair = require('./Chair'),
    TopologyStore = require('../stores/TopologyStore'),
    TopologyActionCreators = require('../actions/TopologyActionCreators');

var Router = require('react-router');
var RouteHandler = Router.RouteHandler;


var Topology = React.createClass({
  displayName: 'Topology',
  contextTypes: {
    router: React.PropTypes.func
  },
  getInitialState: function() {
    return TopologyStore.getTopology();
  },
  componentDidMount: function() {
    TopologyActionCreators.startTopologyRequest();
    TopologyStore.addChangeListener(this._onChange);    
  },
  componentWillUnmount: function() {
    TopologyActionCreators.stopTopologyRequest();    
    TopologyStore.removeChangeListener(this._onChange);    
  },
  render: function() {
    var tapId = this.context.router.getCurrentParams().tapId;
    if (tapId !== "TopologyO"){
      return (
        <div>
          <RouteHandler />
          <div className="row">
            <div className="1" style={{"textAlign": "center"}}>
              <svg version="1.1" id="to_1" x="0px" y="0px" width="80%" height="600" preserveAspectRatio="xMidYMid meet" style={{"textAlign": "center", "borderStyle":"solid","borderWidth":"2px","borderColor":"black","backgroundColor":"white"}} viewBox="0 0 900 600">
                <g className="lines">
                  <line x1="450" y1="500" x2="450" y2="10" style={{"stroke":"rgb(255,0,0)","strokeWidth":"2","cursor":"pointer"}} onClick={this._onClick} />
                  <line x1="286" y1="104" x2="450" y2="104" style={{"stroke":"rgb(255,0,0)","strokeWidth":"2","cursor":"pointer"}} onClick={this._onClick} />
                  <line x1="614" y1="204" x2="450" y2="204" style={{"stroke":"rgb(255,0,0)","strokeWidth":"2","cursor":"pointer"}} onClick={this._onClick} />
                  <line x1="614" y1="400" x2="450" y2="400" style={{"stroke":"rgb(255,0,0)","strokeWidth":"2","cursor":"pointer"}} onClick={this._onClick} />
                  <line x1="286" y1="104" x2="614" y2="204" style={{"stroke":"rgb(0,0,255)","strokeWidth":"2","cursor":"pointer"}} />
                </g>
                <g className="nodes">
                  <Switches id = "switch1" transform="translate(386, 436)"/> 
                  <PLC id = "plc1" transform="translate(222, 40)" />
                  <Server id = "server1" transform="translate(550, 140)" />
                  <Chair id = "chair1" transform="translate(550, 336)" />
                </g>
              </svg>
            </div>
          </div>  
        </div>
      );      
    }
    return (
      <div>
        <RouteHandler />
        <div className="row">
          <div className="1" style={{"textAlign": "center"}}>
            <svg version="1.1" id="to_1" x="0px" y="0px" width="80%" height="600" preserveAspectRatio="xMidYMid meet" style={{"textAlign": "center", "borderStyle":"solid","borderWidth":"2px","borderColor":"black","backgroundColor":"white"}} viewBox="0 0 900 600">
              <g className="lines">
                <line x1="450" y1="500" x2="450" y2="10" style={{"stroke":"rgb(255,0,0)","strokeWidth":"2","cursor":"pointer"}} onClick={this._onClick} />
                <line x1="286" y1="104" x2="450" y2="104" style={{"stroke":"rgb(255,0,0)","strokeWidth":"2","cursor":"pointer"}} onClick={this._onClick} />
                <line x1="614" y1="204" x2="450" y2="204" style={{"stroke":"rgb(255,0,0)","strokeWidth":"2","cursor":"pointer"}} onClick={this._onClick} />
                <line x1="614" y1="400" x2="450" y2="400" style={{"stroke":"rgb(255,0,0)","strokeWidth":"2","cursor":"pointer"}} onClick={this._onClick} />
              </g>
              <g className="nodes">
                <Switches id = "1" transform="translate(386, 436)"/> 
                <PLC id = "plc1" transform="translate(222, 40)" />
                <Server id = "server1" transform="translate(550, 140)" />
                <Chair id = "chair1" transform="translate(550, 336)" />
              </g>
            </svg>
          </div>
        </div>  
      </div>
    );
  },
  _onClick: function() {
    alert('Topology info');
  } 
});

module.exports = Topology;


 if (hierarchys !== undefined) {
      hierarchysList = hierarchys.map(function(one, index) {
        return(
          <h6 key={index}><strong>{one}</strong></h6>
        );  
      });     
    };
    return (
      <div className="col-md-8">
        <div className="row">
          <div className="col-lg-9 visible-lg">
            <Hierarchy hierarchy={hierarchysList} />
            <p>hadsjhajsdhl</p>
          </div>
        </div>
      </div>
    );